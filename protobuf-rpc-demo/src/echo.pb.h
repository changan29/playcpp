// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_INCLUDED_echo_2eproto
#define PROTOBUF_INCLUDED_echo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_echo_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_echo_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_echo_2eproto();
namespace echo {
class A;
class ADefaultTypeInternal;
extern ADefaultTypeInternal _A_default_instance_;
class B;
class BDefaultTypeInternal;
extern BDefaultTypeInternal _B_default_instance_;
class B_HeHeB;
class B_HeHeBDefaultTypeInternal;
extern B_HeHeBDefaultTypeInternal _B_HeHeB_default_instance_;
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
}  // namespace echo
namespace google {
namespace protobuf {
template<> ::echo::A* Arena::CreateMaybeMessage<::echo::A>(Arena*);
template<> ::echo::B* Arena::CreateMaybeMessage<::echo::B>(Arena*);
template<> ::echo::B_HeHeB* Arena::CreateMaybeMessage<::echo::B_HeHeB>(Arena*);
template<> ::echo::EchoRequest* Arena::CreateMaybeMessage<::echo::EchoRequest>(Arena*);
template<> ::echo::EchoResponse* Arena::CreateMaybeMessage<::echo::EchoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace echo {

// ===================================================================

class EchoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.EchoRequest) */ {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EchoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EchoRequest* other);
  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:echo.EchoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.EchoResponse) */ {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EchoResponse* other);
  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(nullptr);
  }

  EchoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:echo.EchoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class A final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.A) */ {
 public:
  A();
  virtual ~A();

  A(const A& from);

  inline A& operator=(const A& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  A(A&& from) noexcept
    : A() {
    *this = ::std::move(from);
  }

  inline A& operator=(A&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const A& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const A* internal_default_instance() {
    return reinterpret_cast<const A*>(
               &_A_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(A* other);
  friend void swap(A& a, A& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline A* New() const final {
    return CreateMaybeMessage<A>(nullptr);
  }

  A* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<A>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const A& from);
  void MergeFrom(const A& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 a = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 urls = 2;
  void clear_urls();
  static const int kUrlsFieldNumber = 2;
  ::google::protobuf::int32 urls() const;
  void set_urls(::google::protobuf::int32 value);

  // int32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:echo.A)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 urls_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class B_HeHeB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.B.HeHeB) */ {
 public:
  B_HeHeB();
  virtual ~B_HeHeB();

  B_HeHeB(const B_HeHeB& from);

  inline B_HeHeB& operator=(const B_HeHeB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  B_HeHeB(B_HeHeB&& from) noexcept
    : B_HeHeB() {
    *this = ::std::move(from);
  }

  inline B_HeHeB& operator=(B_HeHeB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const B_HeHeB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const B_HeHeB* internal_default_instance() {
    return reinterpret_cast<const B_HeHeB*>(
               &_B_HeHeB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(B_HeHeB* other);
  friend void swap(B_HeHeB& a, B_HeHeB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline B_HeHeB* New() const final {
    return CreateMaybeMessage<B_HeHeB>(nullptr);
  }

  B_HeHeB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<B_HeHeB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const B_HeHeB& from);
  void MergeFrom(const B_HeHeB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(B_HeHeB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 urls = 1;
  int urls_size() const;
  void clear_urls();
  static const int kUrlsFieldNumber = 1;
  ::google::protobuf::int32 urls(int index) const;
  void set_urls(int index, ::google::protobuf::int32 value);
  void add_urls(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      urls() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_urls();

  // @@protoc_insertion_point(class_scope:echo.B.HeHeB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > urls_;
  mutable std::atomic<int> _urls_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// -------------------------------------------------------------------

class B final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:echo.B) */ {
 public:
  B();
  virtual ~B();

  B(const B& from);

  inline B& operator=(const B& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  B(B&& from) noexcept
    : B() {
    *this = ::std::move(from);
  }

  inline B& operator=(B&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const B& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const B* internal_default_instance() {
    return reinterpret_cast<const B*>(
               &_B_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(B* other);
  friend void swap(B& a, B& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline B* New() const final {
    return CreateMaybeMessage<B>(nullptr);
  }

  B* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<B>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const B& from);
  void MergeFrom(const B& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(B* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef B_HeHeB HeHeB;

  // accessors -------------------------------------------------------

  // string what = 3;
  void clear_what();
  static const int kWhatFieldNumber = 3;
  const ::std::string& what() const;
  void set_what(const ::std::string& value);
  #if LANG_CXX11
  void set_what(::std::string&& value);
  #endif
  void set_what(const char* value);
  void set_what(const char* value, size_t size);
  ::std::string* mutable_what();
  ::std::string* release_what();
  void set_allocated_what(::std::string* what);

  // .echo.B.HeHeB hehe_a = 2;
  bool has_hehe_a() const;
  void clear_hehe_a();
  static const int kHeheAFieldNumber = 2;
  const ::echo::B_HeHeB& hehe_a() const;
  ::echo::B_HeHeB* release_hehe_a();
  ::echo::B_HeHeB* mutable_hehe_a();
  void set_allocated_hehe_a(::echo::B_HeHeB* hehe_a);

  // int32 b = 1;
  void clear_b();
  static const int kBFieldNumber = 1;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:echo.B)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr what_;
  ::echo::B_HeHeB* hehe_a_;
  ::google::protobuf::int32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_echo_2eproto;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::echo::EchoRequest* request,
                       ::echo::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoRequest

// string msg = 1;
inline void EchoRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoRequest::msg() const {
  // @@protoc_insertion_point(field_get:echo.EchoRequest.msg)
  return msg_.GetNoArena();
}
inline void EchoRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.EchoRequest.msg)
}
#if LANG_CXX11
inline void EchoRequest::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.EchoRequest.msg)
}
#endif
inline void EchoRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.EchoRequest.msg)
}
inline void EchoRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.EchoRequest.msg)
}
inline ::std::string* EchoRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:echo.EchoRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoRequest::release_msg() {
  // @@protoc_insertion_point(field_release:echo.EchoRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRequest::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:echo.EchoRequest.msg)
}

// -------------------------------------------------------------------

// EchoResponse

// string msg = 2;
inline void EchoResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EchoResponse::msg() const {
  // @@protoc_insertion_point(field_get:echo.EchoResponse.msg)
  return msg_.GetNoArena();
}
inline void EchoResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.EchoResponse.msg)
}
#if LANG_CXX11
inline void EchoResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.EchoResponse.msg)
}
#endif
inline void EchoResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.EchoResponse.msg)
}
inline void EchoResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.EchoResponse.msg)
}
inline ::std::string* EchoResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:echo.EchoResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoResponse::release_msg() {
  // @@protoc_insertion_point(field_release:echo.EchoResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoResponse::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:echo.EchoResponse.msg)
}

// -------------------------------------------------------------------

// A

// int32 a = 1;
inline void A::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 A::a() const {
  // @@protoc_insertion_point(field_get:echo.A.a)
  return a_;
}
inline void A::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:echo.A.a)
}

// int32 urls = 2;
inline void A::clear_urls() {
  urls_ = 0;
}
inline ::google::protobuf::int32 A::urls() const {
  // @@protoc_insertion_point(field_get:echo.A.urls)
  return urls_;
}
inline void A::set_urls(::google::protobuf::int32 value) {
  
  urls_ = value;
  // @@protoc_insertion_point(field_set:echo.A.urls)
}

// int32 id = 3;
inline void A::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 A::id() const {
  // @@protoc_insertion_point(field_get:echo.A.id)
  return id_;
}
inline void A::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:echo.A.id)
}

// -------------------------------------------------------------------

// B_HeHeB

// repeated int32 urls = 1;
inline int B_HeHeB::urls_size() const {
  return urls_.size();
}
inline void B_HeHeB::clear_urls() {
  urls_.Clear();
}
inline ::google::protobuf::int32 B_HeHeB::urls(int index) const {
  // @@protoc_insertion_point(field_get:echo.B.HeHeB.urls)
  return urls_.Get(index);
}
inline void B_HeHeB::set_urls(int index, ::google::protobuf::int32 value) {
  urls_.Set(index, value);
  // @@protoc_insertion_point(field_set:echo.B.HeHeB.urls)
}
inline void B_HeHeB::add_urls(::google::protobuf::int32 value) {
  urls_.Add(value);
  // @@protoc_insertion_point(field_add:echo.B.HeHeB.urls)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
B_HeHeB::urls() const {
  // @@protoc_insertion_point(field_list:echo.B.HeHeB.urls)
  return urls_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
B_HeHeB::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:echo.B.HeHeB.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// B

// int32 b = 1;
inline void B::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 B::b() const {
  // @@protoc_insertion_point(field_get:echo.B.b)
  return b_;
}
inline void B::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:echo.B.b)
}

// .echo.B.HeHeB hehe_a = 2;
inline bool B::has_hehe_a() const {
  return this != internal_default_instance() && hehe_a_ != nullptr;
}
inline void B::clear_hehe_a() {
  if (GetArenaNoVirtual() == nullptr && hehe_a_ != nullptr) {
    delete hehe_a_;
  }
  hehe_a_ = nullptr;
}
inline const ::echo::B_HeHeB& B::hehe_a() const {
  const ::echo::B_HeHeB* p = hehe_a_;
  // @@protoc_insertion_point(field_get:echo.B.hehe_a)
  return p != nullptr ? *p : *reinterpret_cast<const ::echo::B_HeHeB*>(
      &::echo::_B_HeHeB_default_instance_);
}
inline ::echo::B_HeHeB* B::release_hehe_a() {
  // @@protoc_insertion_point(field_release:echo.B.hehe_a)
  
  ::echo::B_HeHeB* temp = hehe_a_;
  hehe_a_ = nullptr;
  return temp;
}
inline ::echo::B_HeHeB* B::mutable_hehe_a() {
  
  if (hehe_a_ == nullptr) {
    auto* p = CreateMaybeMessage<::echo::B_HeHeB>(GetArenaNoVirtual());
    hehe_a_ = p;
  }
  // @@protoc_insertion_point(field_mutable:echo.B.hehe_a)
  return hehe_a_;
}
inline void B::set_allocated_hehe_a(::echo::B_HeHeB* hehe_a) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hehe_a_;
  }
  if (hehe_a) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hehe_a = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hehe_a, submessage_arena);
    }
    
  } else {
    
  }
  hehe_a_ = hehe_a;
  // @@protoc_insertion_point(field_set_allocated:echo.B.hehe_a)
}

// string what = 3;
inline void B::clear_what() {
  what_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& B::what() const {
  // @@protoc_insertion_point(field_get:echo.B.what)
  return what_.GetNoArena();
}
inline void B::set_what(const ::std::string& value) {
  
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echo.B.what)
}
#if LANG_CXX11
inline void B::set_what(::std::string&& value) {
  
  what_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:echo.B.what)
}
#endif
inline void B::set_what(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echo.B.what)
}
inline void B::set_what(const char* value, size_t size) {
  
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echo.B.what)
}
inline ::std::string* B::mutable_what() {
  
  // @@protoc_insertion_point(field_mutable:echo.B.what)
  return what_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* B::release_what() {
  // @@protoc_insertion_point(field_release:echo.B.what)
  
  return what_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void B::set_allocated_what(::std::string* what) {
  if (what != nullptr) {
    
  } else {
    
  }
  what_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), what);
  // @@protoc_insertion_point(field_set_allocated:echo.B.what)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace echo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_echo_2eproto
